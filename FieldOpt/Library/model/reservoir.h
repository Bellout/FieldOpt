#ifndef RESERVOIR_H
#define RESERVOIR_H

#include <QString>

/*!
 * \brief Container class for reservoirs.
 *
 * A Reservoir holds information on the grid and fluid properties.
 * This information is located in a file generated by the user.
 * The validity of the reservoir input file is never checked by ResOpt, so care should be taken when generating this file.
 *
 * In the driver file, a reservoir is described as follows:
 *
 * \code{.unparsed}
 * START RESERVOIR
 *  NAME RES1
 *  FILE SIMPLE10x5x10.DATA
 *  TIME 3650
 *  PHASES 0 1 1             ! gas oil water
 *  DENS 0.06054 49.1 64.79  ! gas oil water
 * END RESERVOIR
 * \endcode
 *
 * \todo Create and use fluid properties class here too
 */
class Reservoir
{
private:
    QString m_name;          //!< \todo This is marked as todo in the original ResOpt code.
    QString m_file;          //!< \todo This is marked as todo in the original ResOpt code.
    QString m_matlab_path;   //!< Path to the matlab executable.
    QString m_mrst_path;     //!< Path to the local MRST directory.
    QString m_mrst_script;   //!< Path to custom MRST script to run.
    bool m_keep_mat_file;    //!< Keep .mat files generated when running simulations.
    double m_endtime;        //!< \todo This is marked as todo in the original resopt code.
    bool m_gas_phase;        //!< Whether or not the gas phase exists.
    bool m_oil_phase;        //!< Whether or not the oil phase exists.
    bool m_wat_phase;        //!< Whether or not the water phase exists.
    double m_den_gas;        //!< Gas density.
    double m_den_oil;        //!< Oil density.
    double m_den_wat;        //!< Water density.

public:

        Reservoir();

        QString description() const;

        void setName(const QString &n) {m_name = n;}                                         //!< Set the name of the reservoir.
        void setFile(const QString &f) {m_file = f;}                                         //!< Set the name of the file containing the reservoir description.
        void setMrstPath(const QString &p) {m_mrst_path = p;}                                //!< Set the MRST path.
        void setMatlabPath(const QString &p) {m_matlab_path = p;}                            //!< Set the Matlab path.
        void setKeepMatFile(bool b) {m_keep_mat_file = b;}                                   //!< Set whether or not to keep .mat files from the simulations.
        void setEndTime(double t) {m_endtime = t;}                                           //!< Set the end time of the simulation.
        void setPhases(bool gas, bool oil, bool water);                                      //!< Set which phases are present.
        void setDensities(double gas, double oil, double water);                             //!< Set the densities of the present phases.

        QString name() const {return m_name;}                   //!< Get the name of the reservoir.
        QString file() const {return m_file;}                   //!< Get the file name of the reservoir description file.
        QString matlabPath() const {return m_matlab_path;}      //!< Get the Matlab path.
        QString mrstPath() const {return m_mrst_path;}          //!< Get the MRST path.
        QString mrstScript() const {return m_mrst_script;}      //!< Get the path to the custom MRST script.
        bool keepMatFile() const {return m_keep_mat_file;}      //!< Get whether or not .mat files from the simulations are to be kept.
        double endTime() const {return m_endtime;}              //!< Get the end time of the simulation.
        double gasDensity() {return m_den_gas;}                 //!< Get the gas density.
        double oilDensity() {return m_den_oil;}                 //!< Get the oil density.
        double waterDensity() {return m_den_wat;}               //!< Get the water density.
        int numberOfPhases() {return m_gas_phase + m_oil_phase + m_wat_phase;}  //!< Get the number of phases present.
        bool gasPhase() {return m_gas_phase;}                   //!< Get whether or not a gas phase is present.
        bool oilPhase() {return m_oil_phase;}                   //!< Get whether or not a oil phase is present.
        bool waterPhase() {return m_wat_phase;}                 //!< Get whether or not a water phase is present.
};

#endif // RESERVOIR_H
