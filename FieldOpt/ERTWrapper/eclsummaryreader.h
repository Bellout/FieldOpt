#ifndef ECLSUMMARYREADER_H
#define ECLSUMMARYREADER_H

#include <ert/ecl/ecl_sum.h>
#include <QString>
#include <QtCore/QHash>

namespace ERTWrapper {
    namespace ECLSummary {

/*!
 * \brief The ECLSummaryReader class is a wrapper for ecl_sum in ERT. It lets you retrieve information
 * from summary files generated by eclipse.
 */
        class ECLSummaryReader
        {
        public:
            /*!
             * \brief ECLSummaryReader Reads the summary file specified in the parameter.
             * \param file_name Path to the eclipse summary, with or without file suffix.
             */
            ECLSummaryReader(QString file_name);
            ~ECLSummaryReader();

            /*!
             * \brief GetMiscVar Get a Misc var. Calls ecl_sum_get_misc_var.
             * \param var_name Name of the variable to get, e.g. TIME or YEARS.
             * \param time_index The time index (0 and up).
             * \return The value of the variable at the specified time index.
             */
            double GetMiscVar(QString var_name, int time_index);

            /*!
             * \brief GetFieldVar Get a Field variable. Calls ecl_sum_get_field_var.
             * \param var_name Name of the variable to get, e.g. FOPT or FWCT.
             * \param time_index The time index (0 and up).
             * \return The value of the variable at the specified time index.
             */
            double GetFieldVar(QString var_name, int time_index);

            /*!
             * \brief GetWellVar Get a Well variable. Calls ecl_sum_get_well_var.
             * \param well_name Name of the variable to get, e.g. WOPR or WBHP.
             * \param var_name Name of the well to which the variable belongs, e.g. "PROD" or "INJ" (must be upper-case).
             * \param time_index The time index (0 and up).
             * \return The value of the variable at the specified time index.
             */
            double GetWellVar(QString well_name, QString var_name, int time_index);

            int GetLastReportStep(); //!< Get the last report step, i.e. the highest possible time index.
            int GetFirstReportStep(); //!< Get the first report step, i.e. the lowest possible time index (usually 0).
            bool HasReportStep(int report_step); //!< Check whether the report step is valid, i.e. < last and > first.

            const QList<QString> &keys() const { return keys_; } //!< Get the list of all the keys contained in the summary.
            const QList<QString> &wells() const { return wells_; } //!< Get the list of all wells found in the summary.
            const QList<QString> &field_keys() const { return field_keys_; } //!< Get the list of all field-level keys contained in the summary.
            const QList<QString> &well_keys() const { return well_keys_; } //!< Get the list of all well-level keys contained in the summary.

        private:
            QString file_name_;

            ecl_sum_type *ecl_sum_;
            QList<QString> keys_; //!< A list of all keys found in the summary.
            QList<QString> wells_; //!< A list of all the wells found in the summary.
            QList<QString> field_keys_; //!< A list of all the field keys found in the summary.
            QList<QString> well_keys_; //!< A list of all the well keys found in the summary.
            void populateKeyLists(); //! Populalate the key lists using the ecl_sum_select_matching_general_var_list function.

            /*!
             * Maps from a field property name to the equivalent well property name.
             *
             * This is used when
             * a field property is requested but cannot be found in the summary. This mainly affects
             * summaries written by the Flow reservoir simulator, which apparently does not support writing
             * field-level properties.
             */
            QHash<QString, QString> f2w_prop = {
                    {"FOPT", "WOPT"},
                    {"FWPT", "WWPT"},
                    {"FGPT", "WGPT"},
                    {"FWCT", "WWCT"},
                    {"FOPR", "WOPR"},
                    {"FWPR", "WWPR"},
                    {"FGPR", "WGPR"},
                    {"FGIT", "WGIT"},
                    {"FGIR", "WGIR"},
                    {"FWIT", "WWIT"},
                    {"FWIR", "WWIR"}
            };

            /*!
             * Compute the field-level property value by summing all the well property values.
             * @param field_var_name The field property name.
             * @param time_index The time index (0 and up).
             * @return The sum of all corresponding well property values.
             */
            double computeFieldValueFromWellValues(QString field_var_name, int time_index);

            bool hasWellVar(QString well_name, QString var_name);
            bool hasGroupVar(QString group_name, QString var_name);
            bool hasFieldVar(QString var_name);
            bool hasBlockVar(int block_nr, QString var_name);
            bool hasMiscVar(QString var_name);
        };

    }
}

#endif // ECLSUMMARYREADER_H
